<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"
>
<refentry id="liboil-liboilmacros">
<refmeta>
<refentrytitle role="top_of_page" id="liboil-liboilmacros.top_of_page">Macros</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBOIL Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Macros</refname>
<refpurpose>Macros</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="liboil-liboilmacros.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="oil-min">oil_min</link>                             (x,y)
#define             <link linkend="oil-max">oil_max</link>                             (x,y)
#define             <link linkend="oil-divide-255">oil_divide_255</link>                      (x)
#define             <link linkend="oil-argb">oil_argb</link>                            (a,r,g,b)
#define             <link linkend="oil-argb-noclamp">oil_argb_noclamp</link>                    (a,r,g,b)
#define             <link linkend="oil-argb-A">oil_argb_A</link>                          (color)
#define             <link linkend="oil-argb-G">oil_argb_G</link>                          (color)
#define             <link linkend="oil-argb-B">oil_argb_B</link>                          (color)
#define             <link linkend="oil-argb-R">oil_argb_R</link>                          (color)
#define             <link linkend="oil-muldiv-255">oil_muldiv_255</link>                      (a,b)
#define             <link linkend="oil-clamp-255">oil_clamp_255</link>                       (x)
#define             <link linkend="OIL-GET:CAPS">OIL_GET</link>                             (ptr, offset, type)
#define             <link linkend="OIL-OFFSET:CAPS">OIL_OFFSET</link>                          (ptr, offset)
#define             <link linkend="OIL-INCREMENT:CAPS">OIL_INCREMENT</link>                       (ptr, offset)
</synopsis>
</refsynopsisdiv>









<refsect1 id="liboil-liboilmacros.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
<para>

</para>
</refsect1>

<refsect1 id="liboil-liboilmacros.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="oil-min" role="macro">
<title>oil_min()</title>
<indexterm zone="oil-min"><primary>oil_min</primary></indexterm><programlisting>#define oil_min(x,y) ((x)&lt;(y)?(x):(y))
</programlisting>
<para>
Evaluates to the minimum of <parameter>x</parameter> and <parameter>y</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> a value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> a value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="oil-max" role="macro">
<title>oil_max()</title>
<indexterm zone="oil-max"><primary>oil_max</primary></indexterm><programlisting>#define oil_max(x,y) ((x)&gt;(y)?(x):(y))
</programlisting>
<para>
Evaluates to the maximum of <parameter>x</parameter> and <parameter>y</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> a value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> a value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="oil-divide-255" role="macro">
<title>oil_divide_255()</title>
<indexterm zone="oil-divide-255"><primary>oil_divide_255</primary></indexterm><programlisting>#define oil_divide_255(x) ((((x)+128) + (((x)+128)&gt;&gt;8))&gt;&gt;8)
</programlisting>
<para>
Divides <parameter>x</parameter> by 255 in a way that is compatible with the pixel
operations in Liboil.  The number 65025 is 255*255.
</para>
<para>
Evaluates to <parameter>x</parameter> divided by 255.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> a value in the range [0,65025]
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="oil-argb" role="macro">
<title>oil_argb()</title>
<indexterm zone="oil-argb"><primary>oil_argb</primary></indexterm><programlisting>#define             oil_argb(a,r,g,b)</programlisting>
<para>
Creates a Liboil ARGB value from individual components.  Clamps
each component to [0,255].
</para>
<para>
Evaluates to the ARGB value</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> alpha component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r</parameter>&nbsp;:</term>
<listitem><simpara> red component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&nbsp;:</term>
<listitem><simpara> green component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara> blue component
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="oil-argb-noclamp" role="macro">
<title>oil_argb_noclamp()</title>
<indexterm zone="oil-argb-noclamp"><primary>oil_argb_noclamp</primary></indexterm><programlisting>#define             oil_argb_noclamp(a,r,g,b)</programlisting>
<para>
Creates a Liboil ARGB value from individual components.  Does not
clamp components.
</para>
<para>
Evaluates to the ARGB value</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> alpha component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r</parameter>&nbsp;:</term>
<listitem><simpara> red component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&nbsp;:</term>
<listitem><simpara> green component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara> blue component
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="oil-argb-A" role="macro">
<title>oil_argb_A()</title>
<indexterm zone="oil-argb-A"><primary>oil_argb_A</primary></indexterm><programlisting>#define oil_argb_A(color) (((color)&gt;&gt;24)&amp;0xff)
</programlisting>
<para>
Extracts the alpha component from <parameter>color</parameter>.
</para>
<para>
Evaluates to the alpha component</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> an ARGB value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="oil-argb-G" role="macro">
<title>oil_argb_G()</title>
<indexterm zone="oil-argb-G"><primary>oil_argb_G</primary></indexterm><programlisting>#define oil_argb_G(color) (((color)&gt;&gt;8)&amp;0xff)
</programlisting>
<para>
Extracts the green component from <parameter>color</parameter>.
</para>
<para>
Evaluates to the green component</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> an ARGB value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="oil-argb-B" role="macro">
<title>oil_argb_B()</title>
<indexterm zone="oil-argb-B"><primary>oil_argb_B</primary></indexterm><programlisting>#define oil_argb_B(color) (((color)&gt;&gt;0)&amp;0xff)
</programlisting>
<para>
Extracts the blue component from <parameter>color</parameter>.
</para>
<para>
Evaluates to the blue component</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> an ARGB value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="oil-argb-R" role="macro">
<title>oil_argb_R()</title>
<indexterm zone="oil-argb-R"><primary>oil_argb_R</primary></indexterm><programlisting>#define oil_argb_R(color) (((color)&gt;&gt;16)&amp;0xff)
</programlisting>
<para>
Extracts the red component from <parameter>color</parameter>.
</para>
<para>
Evaluates to the red component</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>color</parameter>&nbsp;:</term>
<listitem><simpara> an ARGB value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="oil-muldiv-255" role="macro">
<title>oil_muldiv_255()</title>
<indexterm zone="oil-muldiv-255"><primary>oil_muldiv_255</primary></indexterm><programlisting>#define oil_muldiv_255(a,b) oil_divide_255((a)*(b))
</programlisting>
<para>
Multiplies <parameter>a</parameter> and <parameter>b</parameter> and divides the result by 255 in a way that
is compatible with the pixel operations in Liboil.
</para>
<para>
Evaluates to the result.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> a value in the range [0,255]
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara> a value in the range [0,255]
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="oil-clamp-255" role="macro">
<title>oil_clamp_255()</title>
<indexterm zone="oil-clamp-255"><primary>oil_clamp_255</primary></indexterm><programlisting>#define oil_clamp_255(x) oil_max(0,oil_min((x),255))
</programlisting>
<para>
Clamps <parameter>x</parameter> to the range [0,255].
</para>
<para>
Evaluates to the clamped value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> a value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="OIL-GET:CAPS" role="macro">
<title>OIL_GET()</title>
<indexterm zone="OIL-GET:CAPS"><primary>OIL_GET</primary></indexterm><programlisting>#define OIL_GET(ptr, offset, type) (*(type *)((uint8_t *)(ptr) + (offset)) )
</programlisting>
<para>
Offsets <parameter>ptr</parameter> by <parameter>offset</parameter> number of bytes, and dereferences it
as type <parameter>type</parameter>.  Note that the offset is in bytes, and not in
the size of the pointer type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="OIL-OFFSET:CAPS" role="macro">
<title>OIL_OFFSET()</title>
<indexterm zone="OIL-OFFSET:CAPS"><primary>OIL_OFFSET</primary></indexterm><programlisting>#define OIL_OFFSET(ptr, offset) ((void *)((uint8_t *)(ptr) + (offset)) )
</programlisting>
<para>
Add <parameter>offset</parameter> bytes to the pointer <parameter>ptr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="OIL-INCREMENT:CAPS" role="macro">
<title>OIL_INCREMENT()</title>
<indexterm zone="OIL-INCREMENT:CAPS"><primary>OIL_INCREMENT</primary></indexterm><programlisting>#define OIL_INCREMENT(ptr, offset) (ptr = (void *)((uint8_t *)ptr + (offset)) )
</programlisting>
<para>
Increments the pointer <parameter>ptr</parameter> by <parameter>offset</parameter> number of bytes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
