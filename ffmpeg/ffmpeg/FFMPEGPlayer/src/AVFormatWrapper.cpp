#include "AVFormatWrapper.h"#include "AVExceptions.h"#include <cassert>bool AVFormatWrapper::s_bInitialized = false;AVFormatWrapper::AVFormatWrapper():        m_pFormatCtx(NULL),        m_bEndOfFile(true){    if (!s_bInitialized) {        av_register_all();        s_bInitialized = true;    }    m_apAVPacket.reset(new AVPacket);    av_init_packet(m_apAVPacket.get());    m_apAVPacket->data = NULL;}void AVFormatWrapper::openFile(const std::string & strFilePath){    closeFile();    if (av_open_input_file(&m_pFormatCtx, strFilePath.c_str(), NULL, 0, NULL) != 0) {        //TODO check if closeFile is needed        throw new AVOpenFileException();    }    if (av_find_stream_info(m_pFormatCtx) < 0) {        //TODO check if closeFile is needed        throw new AVObtainStreamsException();    }    m_bEndOfFile = false;}AVFormatWrapper::~AVFormatWrapper(){    closeFile();}void AVFormatWrapper::closeFile(){    if (isFileOpened()) {    	checkClearPreviousPacket();        av_close_input_file(m_pFormatCtx);        m_pFormatCtx = NULL;        m_bEndOfFile = true;    }}bool AVFormatWrapper::isFileOpened() const{    return m_pFormatCtx != NULL;}AVPacket * AVFormatWrapper::readNextPacket(){	if (!s_bInitialized) {		return NULL;	}	if (!isFileOpened()) {		return NULL;	}	if (m_bEndOfFile) {		return NULL;	}	checkClearPreviousPacket();	if (!av_read_frame(m_pFormatCtx, m_apAVPacket.get())) {		m_bEndOfFile = true;	}	return m_apAVPacket.get();}void AVFormatWrapper::checkClearPreviousPacket(){	assert(m_apAVPacket.get() != NULL);	if (m_apAVPacket->data != NULL) {		av_free_packet(m_apAVPacket.get());		assert(m_apAVPacket->data == NULL);	}}